Experiment Number 1:

*****
#include<stdio.h>
#include<string.h>
// #include<conio.h>
void main()
{
char *code[9][4]={
{"PRG1","START","",""},
{"","USING","*","15"},
{"","L","",""},
{"","A","",""},
{"","ST","",""},
{"FOUR","DC","F",""},
{"FIVE","DC","F",""},
{"TEMP","DS","1F",""},
{"","END","",""}
};
char av[2],avail[15]={'N','N','N','N','N','N','N','N','N','N','N','N','N','N','N'};
int i,j,k,count[3],lc[9]={0,0,0,0,0,0,0,0,0},loc=0;
//clrscr();
printf("----------------------------------------------------\n");
printf("LABEL\t\tOPCODE\n");
printf("----------------------------------------------------\n\n");
for(i=0;i<=8;i++)
{
for(j=0;j<=3;j++)
{
printf("%s\t\t",code[i][j]);
}
j=0;
printf("\n");
}
//getch();
printf("-----------------------------------------------------");
printf("\nVALUES FOR LC : \n\n");
for(j=0;j<=8;j++)
{
if((strcmp(code[j][1],"START")!=0)&&(strcmp(code[j][1],"USING")!=0)&&(strcmp(code[j]
[1],"L")!=0))
lc[j]=lc[j-1]+4;
printf("%d\t",lc[j]);
}
printf("\n\nSYMBOL TABLE:\n----------------------------------------------------\n");
printf("SYMBOL\t\tVALUE\t\tLENGTH\t\tR/A");
printf("\n----------------------------------------------------\n");
for(i=0;i<9;i++)
{
if(strcmp(code[i][1],"START")==0)
{
printf("%s\t\t%d\t\t%d\t\t%c\n",code[i][0],loc,4,'R');
}
else if(strcmp(code[i][0],"")!=0)
{
printf("%s\t\t%d\t\t%d\t\t%c\n",code[i][0],loc,4,'R');
loc=4+loc;
}
else if(strcmp(code[i][1],"USING")==0){}
else
{loc=4+loc;}
}
printf("----------------------------------------------------");
printf("\n\nBASE TABLE:\n-------------------------------------------------------\n");
printf("REG NO\t\tAVAILIBILITY\tCONTENTS OF BASE TABLE");
printf("\n-------------------------------------------------------\n");
for(j=0;j<=8;j++)
{
if(strcmp(code[j][1],"USING")!=0)
{}
else
{
strcpy(av,code[j][3]);
}
}
count[0]=(int)av[0]-48;
count[1]=(int)av[1]-48;
count[2]=count[0]*10+count[1];
avail[count[2]-1]='Y';
for(k=0;k<16;k++)
{
printf(" %d\t\t %c\n",k,avail[k-1]);
}
printf("-------------------------------------------------------\n");
printf("Continue..??");
getchar();
printf("PASS2 TABLE:\n\n");
printf("LABEL\t\tOP1\t\tLC\t\t");
printf("\n----------------------------------------------------\n");
loc=0;
for(i=0;i<=8;i++)
{
for(j=0;j<=3;j++)
{
printf("%s\t\t",code[i][j]);
}
j=0;
printf("\n");
}
printf("-----------------------------------------------------");
//getch();
}


********

Experiment Number 02

******

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
struct deftab
{
char lab[10];
char opc[10];
char oper[10];
} d[10];
void main()
{
char label[10], opcode[10], operand[10], newlabel[10], newoperand[10];
char macroname[10];
int i, lines = 0;
FILE *f1, *f2, *f3;
f1 = fopen("macin.dat", "r");
f2 = fopen("macout.dat", "w");
f3 = fopen("deftab.dat", "w");
fscanf(f1, "%s%s%s", label, opcode, operand);
fprintf(f2, "%s\t%s\t%s\n", label, opcode, operand);
while (strcmp(opcode, "END") != 0)
{
fscanf(f1, "%s%s%s", label, opcode, operand);
if (strcmp(opcode, "MACRO") == 0)
{
strcpy(macroname, label);
fprintf(f2, "%s %s %s\n", label, opcode, operand);
while (strcmp(opcode, "MEND") != 0)
{
if (strcmp(label, macroname) != 0)
{
fprintf(f3, "%s\t%s\t%s\n", label, opcode, operand);
fprintf(f2, "%s %s %s\n", label, opcode, operand);
strcpy(d[lines].lab, label);
strcpy(d[lines].opc, opcode);
strcpy(d[lines].oper, operand);
fscanf(f1, "%s%s%s", label, opcode, operand);
lines++;
}
else
{
fscanf(f1, "%s%s%s", label, opcode, operand);
}
}
fprintf(f2, "%s %s %s\n", label, opcode, operand);
}
else if (strcmp(opcode, macroname) == 0)
{
printf("Lines=%d\n", lines);
for (i = 0; i < 3; i++)
{
fprintf(f2, "%s\t%s\t%s\n", d[i].lab, d[i].opc, d[i].oper);
printf("DLAB=%s\nDOPC=%s\nDOPER=%s\n", d[i].lab, d[i].opc,
d[i].oper);
}
}
else
{
fprintf(f2, "%s %s %s\n", label, opcode, operand);
}
}
fclose(f1);
fclose(f2);
fclose(f3);
printf("FINISHED");
}

******macin.dat

CALC START 1000
SUM MACRO **
** LDA #5
** ADD #10
**STA 2000
** MEND **
** LDA LENGTH
** COMP ZERO
** JEQ LOOP
**SUM**
LENGTH WORD 5
ZERO WORD 0
LOOP SUM **
**END**


MACOUT.DAT
CALC START 1000
** LDA LENGTH
**COMP ZERO
** LEQ LOOP
** LDA #5
** ADD #10
** STA 2000
**END** 


DEFTAB.DAT
** LDA #5
**ADD #10
**STA 2000




Experiment 4:
#include<stdio.h>
#include<string.h>
char *input;
int i=0;
char lasthandle[6],stack[50],handles[][5]={")E(","E*E","E+E","i","E^E"};
//(E) becomes )E( when pushed to stack
int top=0,l; char
prec[9][9]={
 /*input*/
 /*stack + - * / ^ i ( ) $ */
 /* + */ '>', '>','<','<','<','<','<','>','>',
 /* - */ '>', '>','<','<','<','<','<','>','>',
 /* * */ '>', '>','>','>','<','<','<','>','>',
 /* / */ '>', '>','>','>','<','<','<','>','>',
 /* ^ */ '>', '>','>','>','<','<','<','>','>',
 /* i */ '>', '>','>','>','>','e','e','>','>',
 /* ( */ '<', '<','<','<','<','<','<','>','e',
 /* ) */ '>', '>','>','>','>','e','e','>','>',
 /* $ */ '<', '<','<','<','<','<','<','<','>',
 };
int getindex(char c)
{ switch(c)
 { case
'+':return 0;
case '-':return 1; 
case '*':return 2;
case '/':return 3;
case '^':return 4;
case 'i':return 5;
case '(':return 6;
case ')':return 7;
case '$':return 8;
 }
}
int shift()
{ stack[++top]=*(input+i++);
stack[top+1]='\0';
}
int reduce()
{
int i,len,found,t;
for(i=0;i<5;i++)//selecting handles
 {
len=strlen(handles[i]);
 if(stack[top]==handles[i][0]&&top+1>=len)
 {
 found=1;
for(t=0;t<len;t++)
 {
 if(stack[top-t]!=handles[i][t])
 {
found=0;
break;
 }
 }
 if(found==1)
 {
 stack[top-t+1]='E';
top=top-t+1;
strcpy(lasthandle,handles[i]);
stack[top+1]='\0';
 return 1;//successful reduction
 }
 }
 }
return 0;
}
void dispstack()
{
int j;
for(j=0;j<=top;j++)
 printf("%c",stack[j]);
}
void dispinput()
{
int j; for(j=i;j<l;j++)
 printf("%c",*(input+j));
}
void main()
{
int j;
input=(char*)malloc(50*sizeof(char));
printf("\nEnter the string\n");
scanf("%s",input);
input=strcat(input,"$");
l=strlen(input);
strcpy(stack,"$"); printf("\nSTACK\tINPUT\tACTION");
while(i<=l)
{
shift();
printf("\n");
dispstack();
printf("\t");
dispinput();
printf("\tShift");
if(prec[getindex(stack[top])][getindex(input[i])]=='>')
{
while(reduce())
{
printf("\n");
dispstack();
printf("\t");
dispinput();
printf("\tReduced: E->%s",lasthandle);
}
}
}
if(strcmp(stack,"$E$")==0)
printf("\nAccepted;"); else
 printf("\nNot Accepted;");
}


Experiment Number 05

*****

#include<stdio.h>
#include<string.h> int
k=0,z=0,i=0,j=0,c=0; char
a[16],ac[20],stk[15],act[10]; void
check();
int main()
 {
 puts("GRAMMAR is E->E+E \n E->E*E \n E->(E) \n E->id");
puts("enter input string ");
 gets(a); c=strlen(a);
strcpy(act,"SHIFT->");
puts("stack \t input \t action");
 for(k=0,i=0; j<c; k++,i++,j++)
 {
 if(a[j]=='i' && a[j+1]=='d')
 {
stk[i]=a[j];
stk[i+1]=a[j+1];
stk[i+2]='\0';
a[j]=' ';
 a[j+1]=' ';
 printf("\n$%s\t%s$\t%sid",stk,a,act);
 check();
} else {
stk[i]=a[j];
stk[i+1]='\0';
 a[j]=' ';
 printf("\n$%s\t%s$\t%ssymbols",stk,a,act);
check();
 }
}
 }
void check()
 {
 strcpy(ac,"REDUCE TO E");
for(z=0; z<c; z++)
 if(stk[z]=='i' && stk[z+1]=='d')
{
stk[z]='E';
stk[z+1]='\0';
 printf("\n$%s\t%s$\t%s",stk,a,ac);
 j++;
 }
 for(z=0; z<c; z++)
 if(stk[z]=='E' && stk[z+1]=='+' && stk[z+2]=='E')
 { stk[z]='E';
stk[z+1]='\0'; stk[z+2]='\0';
printf("\n$%s\t%s$\t%s",stk,a,ac);
i=i-2;
 }
 for(z=0; z<c; z++)
 if(stk[z]=='E' && stk[z+1]=='*' && stk[z+2]=='E')
 { stk[z]='E';
stk[z+1]='\0'; stk[z+1]='\0';
printf("\n$%s\t%s$\t%s",stk,a,ac);
i=i-2;
 }
 for(z=0; z<c; z++)
 if(stk[z]=='(' && stk[z+1]=='E' && stk[z+2]==')')
 { stk[z]='E';
stk[z+1]='\0'; stk[z+1]='\0';
printf("\n$%s\t%s$\t%s",stk,a,ac);
i=i-2;
 }
}




Experiment Number 06

#include<stdio.h>
#include<string.h> struct
op
{ char l;
char r[20];
}
op[10],pr[10]; void
main()
{
int a,i,k,j,n,z=0,m,q;
char *p,*l; char
temp,t; char *tem;
printf("Enter the Number of Values:");
scanf("%d",&n); for(i=0;i<n;i++)
{ printf("left: ");
scanf(" %c",&op[i].l);
printf("right: ");
scanf(" %s",&op[i].r);
}
printf("Intermediate Code\n") ; for(i=0;i<n;i++)
{
printf("%c=",op[i].l);
printf("%s\n",op[i].r);
}
for(i=0;i<n-1;i++)
{
temp=op[i].l;
for(j=0;j<n;j++)
{
p=strchr(op[j].r,temp);
if(p) {
pr[z].l=op[i].l;
strcpy(pr[z].r,op[i].
r);
z++;
}
}
} pr[z].l=op[n-1].l;
strcpy(pr[z].r,op[n-1].r);
z++;
printf("\nAfter Dead Code Elimination\n"); for(k=0;k<z;k++)
{ printf("%c\t=",pr[k].l);
printf("%s\n",pr[k].r);
}
for(m=0;m<z;m++)
{
tem=pr[m].r;
for(j=m+1;j<z;j++)
{
p=strstr(tem,pr[j].r); 
if(p) { t=pr[j].l;
pr[j].l=pr[m].l;
for(i=0;i<z;i++)
{ l=strchr(pr[i].r,t)
;
if(l) { a=lpr[i].r;
printf("pos: %d\n",a);
pr[i].r[a]=pr[m].l;
}}}}}
printf("Eliminate Common Expression\n"); for(i=0;i<z;i++)
{
printf("%c\t=",pr[i].l);
printf("%s\n",pr[i].r);
}
for(i=0;i<z;i++)
{
for(j=i+1;j<z;j++)
{
q=strcmp(pr[i].r,pr[j].r);
if((pr[i].l==pr[j].l)&&!q)
{
pr[i].l='\0';
} }
}
printf("Optimized Code\n"); for(i=0;i<z;i++) 
{ if(pr[i].l!='\0') {
printf("%c=",pr[i].l);
printf("%s\n",pr[i].r);
}
}
}